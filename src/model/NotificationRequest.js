/**
 * Adyen api
 * Operations about payments, recurring and payout
 *
 * OpenAPI spec version: 30
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/NotificationItems'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./NotificationItems'));
  } else {
    // Browser globals (root is window)
    if (!root.AdyenApiJs) {
      root.AdyenApiJs = {};
    }
    root.AdyenApiJs.NotificationRequest = factory(root.AdyenApiJs.ApiClient, root.AdyenApiJs.NotificationItems);
  }
}(this, function(ApiClient, NotificationItems) {
  'use strict';




  /**
   * The NotificationRequest model module.
   * @module model/NotificationRequest
   * @version 1.30.5
   */

  /**
   * Constructs a new <code>NotificationRequest</code>.
   * @alias module:model/NotificationRequest
   * @class
   * @param live {Boolean} Informs about the origin of the notification, if true means the notification originated from the live environment, else if false so the notification originated from the test environment.
   * @param notificationItems {Array.<module:model/NotificationItems>} 
   */
  var exports = function(live, notificationItems) {
    var _this = this;

    _this['live'] = live;
    _this['notificationItems'] = notificationItems;
  };

  /**
   * Constructs a <code>NotificationRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/NotificationRequest} obj Optional instance to populate.
   * @return {module:model/NotificationRequest} The populated <code>NotificationRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('live')) {
        obj['live'] = ApiClient.convertToType(data['live'], 'Boolean');
      }
      if (data.hasOwnProperty('notificationItems')) {
        obj['notificationItems'] = ApiClient.convertToType(data['notificationItems'], [NotificationItems]);
      }
    }
    return obj;
  }

  /**
   * Informs about the origin of the notification, if true means the notification originated from the live environment, else if false so the notification originated from the test environment.
   * @member {Boolean} live
   */
  exports.prototype['live'] = undefined;
  /**
   * @member {Array.<module:model/NotificationItems>} notificationItems
   */
  exports.prototype['notificationItems'] = undefined;


  /**
   * Returns Informs about the origin of the notification, if true means the notification originated from the live environment, else if false so the notification originated from the test environment.
   * @return {Boolean}
   */
  exports.prototype.getLive = function() {
    return this['live'];
  }

  /**
   * Sets Informs about the origin of the notification, if true means the notification originated from the live environment, else if false so the notification originated from the test environment.
   * @param {Boolean} live Informs about the origin of the notification, if true means the notification originated from the live environment, else if false so the notification originated from the test environment.
   */
  exports.prototype.setLive = function(live) {
    this['live'] = live;
  }


  /**
   * @return {Array.<module:model/NotificationItems>}
   */
  exports.prototype.getNotificationItems = function() {
    return this['notificationItems'];
  }

  /**
   * @param {Array.<module:model/NotificationItems>} notificationItems
   */
  exports.prototype.setNotificationItems = function(notificationItems) {
    this['notificationItems'] = notificationItems;
  }



  return exports;
}));


